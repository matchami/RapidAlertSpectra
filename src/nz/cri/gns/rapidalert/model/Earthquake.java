package nz.cri.gns.rapidalert.model;
// Generated 27/05/2014 4:27:09 PM by Hibernate Tools 3.1.0.beta4

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;


/**
 * Earthquake generated by hbm2java
 */
@Entity
@Table(name="earthquake")
@SequenceGenerator(name = "EARTHQUAKE_SEQ", sequenceName = "EARTHQUAKE_SEQ")
public class Earthquake  implements java.io.Serializable, Comparable<Earthquake> {


	// Fields    

	private static final long serialVersionUID = 1L;
	private int eqId;
	private String slug;
	private Date eqTime;
	private BigDecimal latitude;
	private BigDecimal longitude;
	private BigDecimal eqDepth;
	private BigDecimal eqMagnitude;
	private String geonetUrl;
	private String csvUrl;
	private String location;
	private String status;
	private boolean alert;
	private Date lastModified;
	private Set<Station> stations = new HashSet<Station>(0);


	// Constructors

	/** default constructor */
	public Earthquake() {
	}

	/** minimal constructor */
	public Earthquake(int eqId, String slug, Date eqTime, String status, boolean alert, Date lastModified) {
		this.eqId = eqId;
		this.slug = slug;
		this.eqTime = eqTime;
		this.status = status;
		this.alert = alert;
		this.lastModified = lastModified;
	}

	/** full constructor */
	public Earthquake(int eqId, String slug, Date eqTime, BigDecimal latitude, BigDecimal longitude, BigDecimal eqDepth, BigDecimal eqMagnitude, String geonetUrl, String csvUrl, String location, String status, boolean alert, Date lastModified, Set<Station> stations) {
		this.eqId = eqId;
		this.slug = slug;
		this.eqTime = eqTime;
		this.latitude = latitude;
		this.longitude = longitude;
		this.eqDepth = eqDepth;
		this.eqMagnitude = eqMagnitude;
		this.geonetUrl = geonetUrl;
		this.csvUrl = csvUrl;
		this.location = location;
		this.status = status;
		this.alert = alert;
		this.lastModified = lastModified;
		this.stations = stations;
	}



	// Property accessors
	@Id
	@Column(name="eq_id", unique=true, nullable=false, insertable=true, updatable=true)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "EARTHQUAKE_SEQ")
	public int getEqId() {
		return this.eqId;
	}

	public void setEqId(int eqId) {
		this.eqId = eqId;
	}
	@Column(name="slug", unique=false, nullable=false, insertable=true, updatable=true, length=50)

	public String getSlug() {
		return this.slug;
	}

	public void setSlug(String slug) {
		this.slug = slug;
	}
	@Column(name="eq_time", unique=false, nullable=false, insertable=true, updatable=true, length=29)

	public Date getEqTime() {
		return this.eqTime;
	}

	public void setEqTime(Date eqTime) {
		this.eqTime = eqTime;
	}
	@Column(name="latitude", unique=false, nullable=true, insertable=true, updatable=true, precision=9, scale=6)

	public BigDecimal getLatitude() {
		return this.latitude;
	}

	public void setLatitude(BigDecimal latitude) {
		this.latitude = latitude;
	}
	@Column(name="longitude", unique=false, nullable=true, insertable=true, updatable=true, precision=9, scale=6)

	public BigDecimal getLongitude() {
		return this.longitude;
	}

	public void setLongitude(BigDecimal longitude) {
		this.longitude = longitude;
	}
	@Column(name="eq_depth", unique=false, nullable=true, insertable=true, updatable=true, precision=10, scale=7)

	public BigDecimal getEqDepth() {
		return this.eqDepth;
	}

	public void setEqDepth(BigDecimal eqDepth) {
		this.eqDepth = eqDepth;
	}
	@Column(name="eq_magnitude", unique=false, nullable=true, insertable=true, updatable=true, precision=10, scale=7)

	public BigDecimal getEqMagnitude() {
		return this.eqMagnitude;
	}

	public void setEqMagnitude(BigDecimal eqMagnitude) {
		this.eqMagnitude = eqMagnitude;
	}
	@Column(name="geonet_url", unique=false, nullable=true, insertable=true, updatable=true, length=500)

	public String getGeonetUrl() {
		return this.geonetUrl;
	}

	public void setGeonetUrl(String geonetUrl) {
		this.geonetUrl = geonetUrl;
	}
	@Column(name="csv_url", unique=false, nullable=true, insertable=true, updatable=true, length=500)

	public String getCsvUrl() {
		return this.csvUrl;
	}

	public void setCsvUrl(String csvUrl) {
		this.csvUrl = csvUrl;
	}
	@Column(name="location", unique=false, nullable=true, insertable=true, updatable=true, length=200)

	public String getLocation() {
		return this.location;
	}

	public void setLocation(String location) {
		this.location = location;
	}
	@Column(name="status", unique=false, nullable=false, insertable=true, updatable=true, length=20)

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}
	@Column(name="alert", unique=false, nullable=false, insertable=true, updatable=true)

	public boolean isAlert() {
		return this.alert;
	}

	public void setAlert(boolean alert) {
		this.alert = alert;
	}
	@Column(name="last_modified", unique=false, nullable=false, insertable=true, updatable=true, length=29)

	public Date getLastModified() {
		return this.lastModified;
	}

	public void setLastModified(Date lastModified) {
		this.lastModified = lastModified;
	}
	@OneToMany(cascade={CascadeType.ALL}, fetch=FetchType.LAZY, mappedBy="earthquake")

	public Set<Station> getStations() {
		return this.stations;
	}

	public void setStations(Set<Station> stations) {
		this.stations = stations;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + eqId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Earthquake other = (Earthquake) obj;
		if (eqId != other.eqId)
			return false;
		return true;
	}

	@Override
	public int compareTo(Earthquake eq) {
		if (this.equals(eq)) {
			return 0;
		}
		
		int compare = this.getEqTime().compareTo(eq.getEqTime());
		if (compare != 0) {
			return compare;
		}
		return this.getEqId() - eq.getEqId();
	}










}
